;;  Lua lexer tests
;;  -*-  indent-tabs-mode:nil; coding: utf-8 -*-
;;  Copyright (C) 2014
;;      "Mu Lei" known as "NalaGinrut" <NalaGinrut@gmail.com>
;;  This file is free software: you can redistribute it and/or modify
;;  it under the terms of the GNU General Public License as published by
;;  the Free Software Foundation, either version 3 of the License, or
;;  (at your option) any later version.

;;  This file is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU General Public License for more details.

;;  You should have received a copy of the GNU General Public License
;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define-module (test lexer)
  #:use-module (ice-9 match)
  #:use-module (srfi srfi-1)
  #:use-module (test-suite lib))

;; export all things
(eval-when (eval load compile)
  (export-all-from-module! '(language lua lexer)))

(define-syntax-rule (pick-out a b)
  (any (lambda (x y) (and (not (eqv? x y)) (cons x y))) a b))

;; TODO: add more cases
(define *expr-case-tests*
  `(("a+b" . (id add id))
    ("a-b" . (id minus id))
    ("a/b" . (id div id))
    ("a*b" . (id multi id))
    ("_"   . (sp-id)) ; dummy variable
    ("_VERSION" . (sp-id))
    ("_NoSuchVar" . (sp-id))
    ))

(define *function-define-tests*
  `(("function func (a) \n local num = 0 \n return sum\n end" 
     . (function id lparen id rparen local id assign number return id end))
    ("function add(a,b)
       local sum = a+b
       return sum
      end"
     . (function id lparen id comma id rparen local id assign id add id return id end))
    ))

(define *if-case-tests*
  `(("if a<0 then a = 0 end"
     . (if id lt number then id assign number end))
    ("if line > MAXLINES then
       showpage()
       line = 0
      end"
     . (if id gt id then id lparen rparen id assign number end))
    ("if op == \"+\" then
      r = a + b
     elseif op == \"-\" then
      r = a - b
     elseif op == \"*\" then
      r = a*b
     elseif op == \"/\" then
      r = a/b
     else
      error(\"invalid operation\")
     end"
      . (if id eq string then
            id assign id add id
         elseif id eq string then
            id assign id minus id
         elseif id eq string then
            id assign id multi id
         elseif id eq string then
            id assign id div id
         else
            id lparen string rparen
         end))
    ))

(define *loop-case-tests*
  `(("local i = 1
      while a[i] do
       print(a[i])
       i = i + 1
      end"
     . (local id assign number
        while id lbracket id rbracket do
        id lparen id lbracket id rbracket rparen
        id assign id add number end))
    ("repeat
       line = os.read()
      until line ~= \"\"
      print(line)"
      . (repeat id assign id dot id lparen rparen
         until id neq string
         id lparen id rparen))
    ))

(define *comment-case-tests*
  `(("-- hello.lua
      -- the first program in every language
      io.write(\"Hello world, from \", _VERSION, \"!\n\")"
     . (id dot id lparen string comma sp-id comma string rparen))
    ("---[[
      print(10)    --> 10
      --]]"
     . (id lparen number rparen))
    ("--[[
      print(10)    -- no action (comment)
      --]]"
     . ())
    ))

(define *reserved-word-test*
  `(("return function end if then elseif else true false nil or and
      do while repeat until local for break in not"
     . (return function end if then elseif else true false nil or and
	do while repeat until local for break in not))))

(define-syntax-rule (test-it name tests tests-name)
  (for-each
   (lambda (t)
     (match t
       ((src . expect)
        (let ((r (debug-lua-tokenizer src)))
          (or (equal? r expect)
              (error (string-append name ": Failed:") src expect r (pick-out expect r)))))
       (else (error (string-append "Invalid case in " tests-name) t))))
   tests))

(with-test-prefix "Lua lexer token test"

  (pass-if "expr test"
    (test-it "expr test" *expr-case-tests* "*expr-case-tests*")
    #t)

  (pass-if "function define"
    (test-it "function define" *function-define-tests* "*function-define-tests*")
    #t)

  (pass-if "if-case test"
    (test-it "if-case test" *if-case-tests* "*if-case-tests*")
    #t)

  (pass-if "loop-case test"
    (test-it "loop-case test" *loop-case-tests* "*loop-case-tests*")
    #t)

  (pass-if "comment test"
    (test-it "comment test" *comment-case-tests* "*comment-case-tests*")
    #t)
  
  (pass-if "reserved word test"
    (test-it "reserved word test" *reserved-word-test* "*reserved-word-test*")
    #t)

  ;; TODO: add more tests
)
