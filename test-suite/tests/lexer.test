;;  Lua lexer tests
;;  -*-  indent-tabs-mode:nil; coding: utf-8 -*-
;;  Copyright (C) 2014
;;      "Mu Lei" known as "NalaGinrut" <NalaGinrut@gmail.com>
;;  This file is free software: you can redistribute it and/or modify
;;  it under the terms of the GNU General Public License as published by
;;  the Free Software Foundation, either version 3 of the License, or
;;  (at your option) any later version.

;;  This file is distributed in the hope that it will be useful,
;;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;  GNU General Public License for more details.

;;  You should have received a copy of the GNU General Public License
;;  along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define-module (test lexer)
  #:use-module (ice-9 match)
  #:use-module (ice-9 format)
  #:use-module (srfi srfi-1)
  #:use-module (test-suite lib))

;; export all things
(eval-when (eval load compile)
  (export-all-from-module! '(language lua lexer)))

(define-syntax-rule (pick-out a b)
  (for-each 
   (lambda (x y)
     (format #t "~a~t===~t~a~t -> ~a~%" x y (eqv? x y)))
   a b))

;; TODO: add more cases
(define *expr-case-tests*
  `(("a+b" . (id add id))
    ("a-b" . (id minus id))
    ("a/b" . (id div id))
    ("a*b" . (id multi id))
    ("_"   . (sp-id)) ; dummy variable
    ("_VERSION" . (sp-id))
    ("_NoSuchVar" . (sp-id))
    ("1e-6" . (number))
    ("1-6"  . (number minus number))
    ("1e+6" . (number))
    ("1+6"  . (number add number))
    ("+6"   . (add number))
    ("-6"   . (minus number))
    ))

(define *function-define-tests*
  `(("function func (a) \n local num = 0 \n return sum\n end" 
     . (function id lparen id rparen local id assign number return id end))
    ("function add(a,b)
       local sum = a+b
       return sum
      end"
     . (function id lparen id comma id rparen local id assign id add id return id end))
    ("-- globals.lua
      -- show all global variables

      local seen={}

      function dump(t,i)
	seen[t]=true
	local s={}
	local n=0
	for k in pairs(t) do
		n=n+1 s[n]=k
        end
        table.sort(s)
        for k,v in ipairs(s) do
		print(i,v)
		v=t[v]
		if type(v)==\"table\" and not seen[v] then
			dump(v,i..\"\t\")
		end
	end
      end
      dump(_G,\"\")"
     . (local id assign lbrace rbrace
	function id lparen id comma id rparen
	id lbracket id rbracket assign true
	local id assign lbrace rbrace
	local id assign number
	for id in id lparen id rparen do
	id assign id add number
	id lbracket id rbracket assign id
	end
	id dot id lparen id rparen
	for id comma id in id lparen id rparen do
	id lparen id comma id rparen
	id assign id lbracket id rbracket
	if id lparen id rparen eq string and not id lbracket id rbracket then
	id lparen id comma id concat string rparen
	end end end
	id lparen sp-id comma string rparen))
    ("-- bisect.lua
      -- bisection method for solving non-linear equations

      delta=1e-6	-- tolerance

      function bisect(f,a,b,fa,fb)
      local c=(a+b)/2
      io.write(n, \" c=\",c,\" a=\",a,\" b=\",b,\"\n\")
      if c==a or c==b or math.abs(a-b)<delta then return c,b-a end
      n=n+1
      local fc=f(c)
      if fa*fc<0 then return bisect(f,a,c,fa,fc) else return bisect(f,c,b,fc,fb) end
      end

      -- find root of f in the inverval [a,b]. needs f(a)*f(b)<0
      function solve(f,a,b)
      n=0
      local z,e=bisect(f,a,b,f(a),f(b))
      io.write(string.format(\"after %d steps, root is %.17g with error %.1e, f=%.1e\n\",n,z,e,f(z)))
      end

      -- our function
      function f(x)
         return x*x*x-x-1
      end

      -- find zero in [1,2]
      solve(f,1,2)"
     . (id assign number
	function id lparen id comma id comma id comma id comma id rparen
	local id assign lparen id add id rparen div number
	id dot id lparen id comma string comma id comma string comma id comma 
	string comma id	comma string rparen
	if id eq id or id eq id or id dot id lparen id minus id rparen lt id
	then return id comma id minus id end
	id assign id add number
	local id assign id lparen id rparen
	if id multi id lt number then 
	return id lparen id comma id comma id comma id comma id rparen
	else return id lparen id comma id comma id comma id comma id rparen end end
	function id lparen id comma id comma id rparen
	id assign number
	local id comma id assign id lparen id comma id comma id comma id lparen id rparen
	comma id lparen id rparen rparen
	id dot id lparen id dot id lparen string comma id comma id comma id comma
	id lparen id rparen rparen rparen end
	function id lparen id rparen return id multi id multi id minus id minus number end
	id lparen id comma number comma number rparen))
    ))

(define *if-case-tests*
  `(("if a<0 then a = 0 end"
     . (if id lt number then id assign number end))
    ("if line > MAXLINES then
       showpage()
       line = 0
      end"
     . (if id gt id then id lparen rparen id assign number end))
    ("if op == \"+\" then
      r = a + b
     elseif op == \"-\" then
      r = a - b
     elseif op == \"*\" then
      r = a*b
     elseif op == \"/\" then
      r = a/b
     else
      error(\"invalid operation\")
     end"
      . (if id eq string then
            id assign id add id
         elseif id eq string then
            id assign id minus id
         elseif id eq string then
            id assign id multi id
         elseif id eq string then
            id assign id div id
         else
            id lparen string rparen
         end))
    ))

(define *loop-case-tests*
  `(("local i = 1
      while a[i] do
       print(a[i])
       i = i + 1
      end"
     . (local id assign number
        while id lbracket id rbracket do
        id lparen id lbracket id rbracket rparen
        id assign id add number end))
    ("repeat
       line = os.read()
      until line ~= \"\"
      print(line)"
      . (repeat id assign id dot id lparen rparen
         until id neq string
         id lparen id rparen))
    ))

(define *comment-case-tests*
  `(("-- hello.lua
      -- the first program in every language
      io.write(\"Hello world, from \", _VERSION, \"!\n\")"
     . (id dot id lparen string comma sp-id comma string rparen))
    ("---[[
      print(10)    --> 10
      --]]"
     . (id lparen number rparen))
    ("--[[
      print(10)    -- no action (comment)
      --]]"
     . ())
    ))

(define *reserved-word-test*
  `(("return function end if then elseif else true false nil or and
      do while repeat until local for break in not"
     . (return function end if then elseif else true false nil or and
	do while repeat until local for break in not))))

(define (test-it name tests tests-name)
  (for-each
   (lambda (t)
     (match t
       ((src . expect)
        (let ((r (debug-lua-tokenizer src)))
          (or (equal? r expect)
              (error (string-append name ": Failed:") src (pick-out expect r)))))
       (else (error (string-append "Invalid case in " tests-name) t))))
   tests)
  (format #t "* testing ~d case~:p...~%" (length tests)))

(display "\n=== Lua lexer token tests ===\n")

(with-test-prefix "Lua lexer"

  (pass-if "expr test"
    (test-it "expr test" *expr-case-tests* "*expr-case-tests*")
    #t)

  (pass-if "function define"
    (test-it "function define" *function-define-tests* "*function-define-tests*")
    #t)

  (pass-if "if-case test"
    (test-it "if-case test" *if-case-tests* "*if-case-tests*")
    #t)

  (pass-if "loop-case test"
    (test-it "loop-case test" *loop-case-tests* "*loop-case-tests*")
    #t)

  (pass-if "comment test"
    (test-it "comment test" *comment-case-tests* "*comment-case-tests*")
    #t)
  
  (pass-if "reserved word test"
    (test-it "reserved word test" *reserved-word-test* "*reserved-word-test*")
    #t)

  ;; TODO: add more tests
)
